function loadJS(e,o,t){var i=!!window.ActiveXObject,n=i&&!window.XMLHttpRequest,a=document.createElement("script"),r=n?document.documentElement:document.getElementsByTagName("head")[0];a.type="text/javascript",a.async=!0,a.readyState?a.onreadystatechange=function(){"loaded"!=a.readyState&&"complete"!=a.readyState||(a.onreadystatechange=null,o&&o())}:a.onload=function(){o&&o()},a.src=e,t?document.getElementById(t).appendChild(a):r.insertBefore(a,r.firstChild)}$.fn.extend({isOnScreenVisible:function(){if(!$("body").hasClass("post-template"))return!1;var e=$(window),o={top:e.scrollTop(),left:e.scrollLeft()};o.right=o.left+e.width(),o.bottom=o.top+e.height();var t=this.offset();return t.right=t.left+this.outerWidth(),t.bottom=t.top+this.outerHeight(),!(o.right<t.left||o.left>t.right||o.bottom<t.top||o.top>t.bottom)}});var General={isMobile:!1,isWechat:!1,viewWidth:$(window).width(),absUrl:location.protocol+"//"+location.host,init:function(){var e=window,o=(e.document,navigator.userAgent.toLowerCase()),t=e.navigator.appVersion.match(/android/gi);e.navigator.appVersion.match(/iphone/gi);"micromessenger"==o.match(/MicroMessenger/i)&&(General.isWechat=!0,$("body").addClass("wechat-webview")),t&&(General.isMobile=!0),$("body").hasClass("post-template")&&(General.updateImageWidth(),General.rewardLoader()),General.webFontLoader(),General.scrollToPos()},updateImageWidth:function(){function e(){var e=$(this),o=t.outerWidth(),i=this.naturalWidth;i>=o?e.addClass("full-img"):e.removeClass("full-img")}function o(){i.each(e)}var t=$(".post-content"),i=$(".single-post-inner img").on("load",e);o()},webFontLoader:function(){WebFontConfig={loading:function(){},custom:{families:["iconfont","fontawesome"],urls:["https://img.halfrost.com/iconfonts/iconfont.css",General.absUrl+"/assets/css/font-awesome.min.css"]}},loadJS(General.absUrl+"/assets/js/webfont.js",function(){WebFont.load({custom:{families:["iconfont","fontawesome"]}})})},scrollToPos:function(e){var o="我要飞到最高",t=(e||$(window).height(),$('<a aria-label="top" href="#" id="to-top" title="'+o+'"> <div class="to-top-wrap"></div></a>').appendTo("body"));$(window).scroll(function(){$(window).scrollTop()>$(window).height()?t.fadeIn(500):t.fadeOut(500)}),t.click(function(e){e.preventDefault(),$("html,body").animate({scrollTop:0},666,function(){window.location.hash="#"})})},urlIconlize:function(e){var o,t,i={twitter:"iconfont-twitter icon-iconfonttwitter",qzone:"iconfont-qzone icon-qzone",weibo:"iconfont-weibo icon-iconfontweibo",facebook:"iconfont-facebook icon-iconfontfacebook",github:"iconfont-github icon-github",douban:"iconfont-douban icon-iconfontdouban",google:"iconfont-google icon-iconfontgoogle",luolei:"iconfont-luolei icon-luolei",dribble:"iconfont-dribble icon-dribbblecircled",v2ex:"iconfont-v2ex icon-iconfontv2ex",zhihu:"iconfont-zhihu icon-iconfontzhihu",wikipedia:"iconfont-wikipedia icon-iconfontwikipedia",jianshu:"iconfont-jianshu icon-jianshu",youku:"iconfont-youku icon-iconfontyouku",youtube:"iconfont-youtube icon-youtube",juejin:"iconfont-juejin icon-juejin",weixin:"iconfont-weixin icon-iconfontwechat",segmentfault:"iconfont-sf icon-iconsf-copy"};for(var n in i)if("function"!=typeof i[n]){var a=n;e.indexOf(a)>=0&&(o=a,t=i[a])}return t},addIcons:function(){$(".single-post-inner  a:not(:has(img))").each(function(e){var o=$(this).attr("href"),t=document.createElement("a");t.href=o,_selfDomain=t.hostname,General.urlIconlize(_selfDomain),$(this).prepend('<i class="iconfont '+General.urlIconlize(_selfDomain)+'"></i>');var i=$(this).find("i").css("color"),n=$(this).css("color");$(this).hover(function(){$(this).css("color",i),$(this).addClass("animated pulse")},function(){$(this).css("color",n),$(this).removeClass("animated pulse")})})},rewardLoader:function(){var e={alipay:"/assets/images/qr-alipay-255.png",wechat:"/assets/images/qr-wechat-255.png"};General.isWechat&&$(".wechat-code b").html("长按上方二维码打赏作者"),$(".money-like .reward-button").hover(function(){$("img.wechat-img").attr("src",e.wechat),$("img.alipay-img").attr("src",e.alipay),$(".money-code").fadeIn(),$(this).addClass("active")},function(){$(".money-code").fadeOut(),$(this).removeClass("active")},800),$(".money-like .reward-button").click(function(){$(this).hasClass("active")?($(this).find("img.wechat-img").attr("src",e.wechat),$(this).find("img.alipay-img").attr("src",e.alipay),$(".money-code").fadeOut(),$(this).removeClass("active")):($(".money-code").fadeIn(),$(this).addClass("active"))})}},ImageSmartLoader={isWebPSupported:!1,isImageCompressed:!1,init:function(){ImageSmartLoader.webPCheck()},isCompressedCheck:function(){},webPCheck:function(e,o){var t={demo:"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAsAAAABBxAREYiI/gcAAABWUDggGAAAADABAJ0BKgEAAQABABwlpAADcAD+/gbQAA=="},i=new Image;i.onload=function(){i.width>0&&i.height>0;ImageSmartLoader.isWebPSupported=!0,ImageSmartLoader.webPLoader()},i.onerror=function(){ImageSmartLoader.isWebPSupported=!1,ImageSmartLoader.webPLoader()},i.src="data:image/webp;base64,"+t.demo},imgLoader:function(){},webPLoader:function(){if(ImageSmartLoader.isWebPSupported===!0){if(768==General.viewWidth)return $(".lazy").lazyload({advanced_load:!0,data_attribute:"url",webP_load:!0,is_scale:!1}),!1;General.viewWidth<768?$(".lazy").lazyload({advanced_load:!0,data_attribute:"url",webP_load:!0,is_scale:!0,scale_width:750}):$(".lazy").lazyload({advanced_load:!0,data_attribute:"url",webP_load:!0,is_scale:!1})}else{if(768==General.viewWidth)return $(".lazy").lazyload({advanced_load:!0,data_attribute:"url",webP_load:!1,is_scale:!0,scale_width:1500}),!1;General.viewWidth<768?$(".lazy").lazyload({advanced_load:!0,data_attribute:"url",webP_load:!1,is_scale:!0,scale_width:750}):$(".lazy").lazyload({advanced_load:!1,data_attribute:"url",webP_load:!1,is_scale:!1})}}};$(document).ready(function(){var e=$(window),o=document.getElementById("scroll-hint");if(null!==o&&($(".header-scroll-hint").on("click",function(e){var o=$(this).closest(".cover");$("html, body").animate({scrollTop:o.position().top+o.height()},400),e.preventDefault()}),window.addEventListener("load",function(){var e=window.pageYOffset||document.documentElement.scrollTop;e>0?o.classList.remove("visible"):o.classList.add("visible")}),window.addEventListener("scroll",function(){var e=window.pageYOffset||document.documentElement.scrollTop;e>0?o.classList.remove("visible"):o.classList.add("visible")})),$("#toc").initTOC({selector:"h1, h2, h3, h4, h5, h6",scope:"article",overwrite:!1,prefix:"toc"}),$(".sidebar-toggle").on("click",function(e){$("body").hasClass("sidebar-opened")?($("body").removeClass("sidebar-opened"),$("body").css("overflow","scroll")):($("body").addClass("sidebar-opened"),$("body").css("overflow","hidden")),e.preventDefault()}),$(".search-toggle").on("click",function(e){$("body").hasClass("search-opened")?($("body").removeClass("search-opened"),$("body").css("overflow","scroll"),searchField.clear()):($("body").addClass("search-opened"),$("body").css("overflow","hidden"),setTimeout(function(){$("#search-field").focus()},300)),e.preventDefault()}),$(".overlay").on("click",function(e){$("body").removeClass("sidebar-opened search-opened"),$("body").css("overflow","scroll"),searchField.clear(),e.preventDefault()}),"undefined"!=typeof disqus_shortname){var t=!1;$(".comments-title").on("click",function(){var e=$(this);t?($("#disqus_thread").slideToggle(),e.hasClass("toggled-on")?e.removeClass("toggled-on"):e.addClass("toggled-on")):($.ajax({type:"GET",url:"//"+disqus_shortname+".disqus.com/embed.js",dataType:"script",cache:!0}),e.addClass("toggled-on"),t=!0)})}$.fn.lazyload=function(o){function t(){var e=0;n.each(function(){var o=$(this);if(!a.skip_invisible||o.is(":visible"))if($.abovethetop(this,a)||$.leftofbegin(this,a));else if($.belowthefold(this,a)||$.rightoffold(this,a)){if(++e>a.failure_limit)return!1}else o.trigger("appear"),e=0})}var i,n=this,a={threshold:0,failure_limit:0,event:"scroll",effect:"show",container:window,data_attribute:"original",skip_invisible:!1,appear:null,load:null,placeholder:"",advanced_load:!1,webP_load:!1,is_scale:!1,scale_width:750};return o&&(void 0!==o.failurelimit&&(o.failure_limit=o.failurelimit,delete o.failurelimit),void 0!==o.effectspeed&&(o.effect_speed=o.effectspeed,delete o.effectspeed),$.extend(a,o)),i=void 0===a.container||a.container===window?e:$(a.container),0===a.event.indexOf("scroll")&&i.bind(a.event,function(){return t()}),this.each(function(){var e=this,o=$(e);e.loaded=!1,void 0!==o.attr("src")&&o.attr("src")!==!1||o.is("img")&&(o.attr("src",a.placeholder),o.addClass("loading")),o.one("appear",function(){if(!this.loaded){if(a.appear){var t=n.length;a.appear.call(e,t,a)}var i=o.attr("data-"+a.data_attribute);void 0===i&&(i=o.attr("src")),void 0===i&&(i=o.style.backgroundImage),void 0!==i&&i.indexOf("img.halfrost.com")>-1&&(a.advanced_load===!0&&(i+="?imageView2"),a.is_scale===!0&&(i+="/0/w/"+a.scale_width),a.webP_load===!0&&a.is_scale===!1&&(i+="/0/format/webp"),a.webP_load===!0&&a.is_scale===!0&&(i+="/format/webp"),a.webP_load===!1&&i.indexOf("https://img.halfrost.com/Blog/ArticleTitleImage/background-cover_.png")>-1&&(i="https://img.halfrost.com/Blog/ArticleTitleImage/background-cover_.png")),$("<img />").bind("load",function(){o.hide(),o.is("img")?o.attr("src",i):o.css("background-image","url('"+i+"')"),o[a.effect](a.effect_speed),e.loaded=!0;var t=$.grep(n,function(e){return!e.loaded});if(n=$(t),a.load){var r=n.length;a.load.call(e,r,a)}o.removeClass("loading")}).attr("src",i)}}),0!==a.event.indexOf("scroll")&&o.bind(a.event,function(){e.loaded||o.trigger("appear")})}),e.bind("resize",function(){t()}),/(?:iphone|ipod|ipad).*os 5/gi.test(navigator.appVersion)&&e.bind("pageshow",function(e){e.originalEvent&&e.originalEvent.persisted&&n.each(function(){$(this).trigger("appear")})}),$(document).ready(function(){t()}),this},$.belowthefold=function(o,t){var i;return i=void 0===t.container||t.container===window?(window.innerHeight?window.innerHeight:e.height())+e.scrollTop():$(t.container).offset().top+$(t.container).height(),i<=$(o).offset().top-t.threshold},$.rightoffold=function(o,t){var i;return i=void 0===t.container||t.container===window?e.width()+e.scrollLeft():$(t.container).offset().left+$(t.container).width(),i<=$(o).offset().left-t.threshold},$.abovethetop=function(o,t){var i;return i=void 0===t.container||t.container===window?e.scrollTop():$(t.container).offset().top,i>=$(o).offset().top+t.threshold+$(o).height()},$.leftofbegin=function(o,t){var i;return i=void 0===t.container||t.container===window?e.scrollLeft():$(t.container).offset().left,i>=$(o).offset().left+t.threshold+$(o).width()},$.inviewport=function(e,o){return!($.rightoffold(e,o)||$.leftofbegin(e,o)||$.belowthefold(e,o)||$.abovethetop(e,o))},$.extend($.expr[":"],{"below-the-fold":function(e){return $.belowthefold(e,{threshold:0})},"above-the-top":function(e){return!$.belowthefold(e,{threshold:0})},"right-of-screen":function(e){return $.rightoffold(e,{threshold:0})},"left-of-screen":function(e){return!$.rightoffold(e,{threshold:0})},"in-viewport":function(e){return $.inviewport(e,{threshold:0})},"above-the-fold":function(e){return!$.belowthefold(e,{threshold:0})},"right-of-fold":function(e){return $.rightoffold(e,{threshold:0})},"left-of-fold":function(e){return!$.rightoffold(e,{threshold:0})}}),General.init(),ImageSmartLoader.init(),$("body").hasClass("post-template")&&General.addIcons()});
!function(e){"function"==typeof define&&define.amd?define(["jquery"],e):e(jQuery)}(function(e){"use strict";var n=function(e){if("string"!=typeof e)return 0;var n=e.match(/\d/g);return n?Math.min.apply(null,n):1},t=function(n,t){for(;t--;)n=e("<ol/>").appendTo(n),t&&(n=e("<li/>").appendTo(n));return n},r=function(e,n){for(;n--;)e=e.parent();return e},o=function(e,n){return function(t,r,o){var i=t.text(),a=n+"-"+o;r.text(i);var c=t[0],f=r[0],u=e?a:c.id||a;u=encodeURIComponent(u),c.id=u,f.href="#"+u}},i=function(i){var a=i.selector,c=i.scope,f=e("<ol/>"),u=f,p=null,s=n(a),l=o(i.overwrite,i.prefix);return e(c).find(a).each(function(o,i){var a=n(i.tagName),c=a-s;c>0&&(u=t(p,c)),c<0&&(u=r(u,2*-c)),u.length||(u=f);var h=e("<li/>"),d=e("<a/>");l(e(i),d,o),h.append(d).appendTo(u),p=h,s=a}),f};e.fn.initTOC=function(n){var t={selector:"h1, h2, h3, h4, h5, h6",scope:"body",overwrite:!1,prefix:"toc"};n=e.extend(t,n);var r=n.selector;if("string"!=typeof r)throw new TypeError("selector must be a string");if(!r.match(/^(?:h[1-6],?\s*)+$/g))throw new TypeError("selector must contains only h1-6");e(this).append(i(n));var o=location.hash;return o&&setTimeout(function(){var e=document.getElementById(o.slice(1));e&&e.scrollIntoView()},0),e(this)}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
